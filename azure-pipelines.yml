pool:
  vmImage: 'ubuntu-latest'

variables:
  azureServiceConnection: 'Visual Studio Enterprise with MSDN(345d42b9-5ca1-4189-a6d8-a8c32fe22d98)'
  subscriptionId: '345d42b9-5ca1-4189-a6d8-a8c32fe22d98'
  resourceGroupName: 'deploymentTest'
  resourceGroupLocation: 'UKSouth'
  location: 'UKSouth'
  appServicePlanName: 'myAppServicePlan111'
  functionApp1Name: 'testFunctionApp1-xyz123'
  functionApp2Name: 'testFunctionApp2-xyz123'
  serviceBusNamespaceName: 'testServiceBusNamespace-xyz123'
  appInsightsName: 'myAppInsights'
  keyVaultName: 'testKeyVault-xyz1233'
  storageAccountName: 'mystorageaccountjj3424'
  aksClusterName: 'myAKSCluster'
  grafanaNamespace: 'grafana'
  redisNamespace: 'redis'


steps:
  - task: Bash@3
    displayName: 'Generate SSH Key Pair'
    inputs:
      targetType: 'inline'
      script: |
        # Generate SSH key pair
        ssh-keygen -t rsa -b 4096 -f id_rsa -N "" -C "azure-pipeline"
        
        echo "##vso[task.setvariable variable=sshPublicKey]$(cat id_rsa.pub)"

  - task: AzureCLI@2
    displayName: 'Create Resource Group'
    inputs:
      azureSubscription: $(azureServiceConnection)
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        # Create the resource group using Bicep
        az deployment sub create --location $(resourceGroupLocation) --template-file group.bicep --parameters resourceGroupName=$(resourceGroupName) resourceGroupLocation=$(resourceGroupLocation)

  - task: AzureCLI@2
    displayName: 'Deploy Bicep Template'
    inputs:
      azureSubscription: $(azureServiceConnection)
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        # Deploy the Bicep template with the generated SSH public key
        az deployment group create --resource-group $(resourceGroupName) --template-file main.bicep --parameters sshPublicKey="$(sshPublicKey)"
  - task: HelmInstaller@1
    displayName: 'Install Helm'
    inputs:
      helmVersion: 'latest'

  - task: Kubernetes@1
    displayName: 'Deploy Grafana using Helm'
    inputs:
      connectionType: 'Azure Resource Manager'
      azureSubscriptionEndpoint: $(azureServiceConnection)
      azureResourceGroup: $(resourceGroupName)
      kubernetesCluster: $(aksClusterName)
      namespace: $(grafanaNamespace)
      command: 'create'
  
  - task: HelmDeploy@0
    displayName: 'Install Grafana'
    inputs:
      connectionType: 'Azure Resource Manager'
      azureSubscription: $(azureServiceConnection)
      azureResourceGroup: $(resourceGroupName)
      kubernetesCluster: $(aksClusterName)
      namespace: $(grafanaNamespace)
      command: 'install'
      chartType: 'stable'
      chartName: 'grafana'
      releaseName: 'grafana'
      arguments: '--set adminPassword=admin'

  - task: Kubernetes@1
    displayName: 'Deploy Redis using Helm'
    inputs:
      connectionType: 'Azure Resource Manager'
      azureSubscriptionEndpoint: $(azureServiceConnection)
      azureResourceGroup: $(resourceGroupName)
      kubernetesCluster: $(aksClusterName)
      namespace: $(redisNamespace)
      command: 'create'

  - task: HelmDeploy@0
    displayName: 'Install Redis'
    inputs:
      connectionType: 'Azure Resource Manager'
      azureSubscription: $(azureServiceConnection)
      azureResourceGroup: $(resourceGroupName)
      kubernetesCluster: $(aksClusterName)
      namespace: $(redisNamespace)
      command: 'install'
      chartType: 'stable'
      chartName: 'redis'
      releaseName: 'redis'
      arguments: '--set usePassword=true,password=redispassword'

  - task: Kubernetes@1
    displayName: 'Create LoadBalancer Services'
    inputs:
      connectionType: 'Azure Resource Manager'
      azureSubscriptionEndpoint: $(azureServiceConnection)
      azureResourceGroup: $(resourceGroupName)
      kubernetesCluster: $(aksClusterName)
      namespace: $(grafanaNamespace)
      command: 'apply'
      useConfigurationFile: true
      configuration: |
        apiVersion: v1
        kind: Service
        metadata:
          name: grafana-loadbalancer
          namespace: $(grafanaNamespace)
        spec:
          type: LoadBalancer
          ports:
            - port: 80
              targetPort: 3000
          selector:
            app.kubernetes.io/name: grafana

  - task: Kubernetes@1
    displayName: 'Create LoadBalancer Services for Redis'
    inputs:
      connectionType: 'Azure Resource Manager'
      azureSubscriptionEndpoint: $(azureServiceConnection)
      azureResourceGroup: $(resourceGroupName)
      kubernetesCluster: $(aksClusterName)
      namespace: $(redisNamespace)
      command: 'apply'
      useConfigurationFile: true
      configuration: |
        apiVersion: v1
        kind: Service
        metadata:
          name: redis-loadbalancer
          namespace: $(redisNamespace)
        spec:
          type: LoadBalancer
          ports:
            - port: 6379
              targetPort: 6379
          selector:
            app.kubernetes.io/name: redis

  - task: AzureCLI@2
    displayName: 'Output Grafana and Redis Passwords'
    inputs:
      azureSubscription: $(azureServiceConnection)
      scriptType: 'bash'
      scriptLocation: 'inlineScript'
      inlineScript: |
        echo "Grafana Admin Password: admin"
        
        echo "Redis Password: redispassword"