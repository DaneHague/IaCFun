pool:
  vmImage: 'ubuntu-latest'

variables:
  azureServiceConnection: 'Visual Studio Enterprise with MSDN(345d42b9-5ca1-4189-a6d8-a8c32fe22d98)'
  subscriptionId: '345d42b9-5ca1-4189-a6d8-a8c32fe22d98'
  resourceGroupName: 'deploymentTest'
  resourceGroupLocation: 'UKSouth'
  location: 'UKSouth'
  appServicePlanName: 'myAppServicePlan111'
  functionApp1Name: 'testFunctionApp1-xyz123'
  functionApp2Name: 'testFunctionApp2-xyz123'
  serviceBusNamespaceName: 'testServiceBusNamespace-xyz123'
  appInsightsName: 'myAppInsights'
  keyVaultName: 'testKeyVault-xyz1233'
  storageAccountName: 'mystorageaccountjj3424'
  aksClusterName: 'myAKSCluster'
  grafanaNamespace: 'grafana'
  redisNamespace: 'redis'

stages:
  - stage: GenerateSSHKey
    displayName: 'Generate SSH Key'
    jobs:
      - job: GenerateKey
        displayName: 'Generate SSH Key'
        steps:
          - task: Bash@3
            name: TestTask1
            displayName: 'Generate SSH Key Pair'
            inputs:
              targetType: 'inline'
              script: |
                # Generate SSH key pair without passphrase
                ssh-keygen -t rsa -b 4096 -f id_rsa -N "" -C "azure-pipeline"
                
                # Read the public key
                publicKey=$(cat id_rsa.pub)
                
                # Set the public key as an output variable
                echo "##vso[task.setvariable variable=sshPublicKey;isOutput=true]$publicKey"

                # Debugging output
                echo "Generated SSH Public Key: $publicKey"

  - stage: CompareKeys
    displayName: 'Compare SSH Public Keys'
    dependsOn: GenerateSSHKey
    jobs:
      - job: CompareKeysJob
        displayName: 'Compare SSH Keys'
        variables:
          sshPublicKey: $[ stageDependencies.GenerateSSHKey.GenerateKey.outputs['TestTask1.sshPublicKey'] ]
        steps:
          - script: |
              echo "Generated SSH Public Key: $(sshPublicKey)"
            displayName: 'Compare SSH Public Keys'

  - stage: ResourceGroupSetup
    displayName: 'Setup Resource Group'
    dependsOn: GenerateSSHKey
    jobs:
      - job: CreateResourceGroup
        steps:
          - task: AzureCLI@2
            displayName: 'Create Resource Group'
            inputs:
              azureSubscription: $(azureServiceConnection)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Create the resource group using Bicep
                az deployment sub create --location $(resourceGroupLocation) --template-file group.bicep --parameters resourceGroupName=$(resourceGroupName) resourceGroupLocation=$(resourceGroupLocation)

  - stage: WhatIfDeployment
    displayName: 'What-If Deployment'
    dependsOn: 
      - ResourceGroupSetup
      - GenerateSSHKey
    
    jobs:
      - job: WhatIf
        variables:
          sshPublicKey: $[ stageDependencies.GenerateSSHKey.GenerateKey.outputs['TestTask1.sshPublicKey'] ]
        steps:
          - script: |
              echo "SSH Public Key for What-If: $(sshPublicKey)"
            displayName: 'Echo SSH Public Key'
          - task: AzureCLI@2
            displayName: 'What-If Bicep Template'
            inputs:
              azureSubscription: $(azureServiceConnection)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Perform a what-if operation to preview changes
                az deployment group what-if --resource-group $(resourceGroupName) --template-file main.bicep --parameters sshPublicKey="$(sshPublicKey)"

  - stage: Approval
    displayName: 'Approval'
    dependsOn: WhatIfDeployment
    jobs:
      - job: ManualApproval
        pool: server
        steps:
          - task: ManualValidation@0
            inputs:
              notifyUsers: |
                danehague1@googlemail.com
              instructions: 'Please validate the build configuration and resume'
              onTimeout: 'resume'
            timeoutInMinutes: 30

  - stage: DeployResources
    displayName: 'Deploy Resources'
    dependsOn: Approval
    jobs:
      - job: Deploy
        variables:
          sshPublicKey: $[ stageDependencies.GenerateSSHKey.GenerateKey.outputs['TestTask1.sshPublicKey'] ]
        steps:
          - script: |
              echo "SSH Public Key for Deployment: $(sshPublicKey)"
            displayName: 'Echo SSH Public Key'
          - task: AzureCLI@2
            displayName: 'Deploy Bicep Template'
            inputs:
              azureSubscription: $(azureServiceConnection)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Deploy the Bicep template with the generated SSH public key
                az deployment group create --resource-group $(resourceGroupName) --template-file main.bicep --parameters sshPublicKey="$(sshPublicKey)"

  - stage: ConfigureKubernetes
    displayName: 'Configure Kubernetes'
    dependsOn: DeployResources
    jobs:
      - job: Configure
        steps:
          - task: HelmInstaller@1
            displayName: 'Install Helm'
            inputs:
              helmVersion: 'latest'

          - task: AzureCLI@2
            displayName: 'Configure kubectl'
            inputs:
              azureSubscription: $(azureServiceConnection)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Get AKS credentials
                az aks get-credentials --resource-group $(resourceGroupName) --name $(aksClusterName) --overwrite-existing

          - task: AzureCLI@2
            displayName: 'Create Namespace for Grafana'
            inputs:
              azureSubscription: $(azureServiceConnection)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Create namespace for Grafana
                kubectl create namespace $(grafanaNamespace) || true
                kubectl create namespace $(redisNamespace) || true

          - task: AzureCLI@2
            displayName: 'Add Helm Repositories'
            inputs:
              azureSubscription: $(azureServiceConnection)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Add Helm repositories
                helm repo add grafana https://grafana.github.io/helm-charts
                helm repo update

          - task: AzureCLI@2
            displayName: 'Install Grafana'
            inputs:
              azureSubscription: $(azureServiceConnection)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Install Grafana using Helm
                helm install grafana grafana/grafana --namespace $(grafanaNamespace) --set adminPassword=admin --set service.type=LoadBalancer --set service.port=3000

          - task: AzureCLI@2
            displayName: 'Output Grafana Admin Password'
            inputs:
              azureSubscription: $(azureServiceConnection)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                # Output Grafana admin password
                echo "Grafana Admin Password: admin"

          - task: AzureCLI@2
            displayName: 'Output Grafana and Redis Passwords'
            inputs:
              azureSubscription: $(azureServiceConnection)
              scriptType: 'bash'
              scriptLocation: 'inlineScript'
              inlineScript: |
                echo "Grafana Admin Password: admin"
